// Коннектор  взаимодействия с WarehouseService (склад))
const fetch = require('node-fetch');
require('dotenv').config();
const common = require("openfsm-common"); // Библиотека с общими параметрами
const CommonFunctionHelper = require("openfsm-common-functions")
const commonFunction= new CommonFunctionHelper();

class OrderServiceClientHandler {
    constructor(token) {
    }

    /**
     * Метод для выполнения запроса на получение параметров заказа
     * @param {string} orderId - идентификатор заказа
     * @returns {Object} - Объект с параметрами продукта
     */

    async findOrderDetailsById(token, orderId) {
        try {
            // Проверяем, что product_id определен
            if (!orderId)  throw(common.HTTP_CODES.BAD_REQUEST.code) 
            const response = await fetch(`${process.env.WAREHOUSE_SERVICE_GET_ORDER_DETAILS}/${orderId}/details`, {
                method: 'GET',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${token}`, },
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error.message, error: commonFunction.getDescriptionByCode(error.message)};
        }
    }
    async findOrdersByUserId(token) {
        try {
            // Проверяем, что product_id определен
            if (!orderId)  throw(common.HTTP_CODES.BAD_REQUEST.code) 
            const response = await fetch(`${process.env.ORDER_SERVICE_GET_ORDERS}`, {
                method: 'GET',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${token}`, },
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error.message, error: commonFunction.getDescriptionByCode(error.message)};
        }
    } 
    async findOrderByReferenceId(token, referenceId) {
        try {
            // Проверяем, что product_id определен
            if (!referenceId)  throw(common.HTTP_CODES.BAD_REQUEST.code) 
            const response = await fetch(`${process.env.ORDER_SERVICE_GET_ORDER_BY_REFERENCE_ID}/${referenceId}`, {
                method: 'GET',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${token}`, },
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error.message, error: commonFunction.getDescriptionByCode(error.message)};
        }
    } 
}

module.exports = OrderServiceClientHandler;
