// Общая библиотека Payment
/* SQL Queries */
const SQL = {
  INSTRUMENTS: {
    SQL_GET_INSTRUMENTS : `SELECT instrument_id as "instrumentId",  instrument_code as "instrumentCode",  instrument_name as "instrumentName" from pa_payment_service.payment_instruments`,    
    SQL_SET_DEFAULT_CARD : `
      WITH updated_card AS (
          UPDATE pa_payment_service.payment_cards
              SET "is_default" = true
              WHERE card_id = $2
              AND user_id = $1
          RETURNING user_id
      )
      UPDATE pa_payment_service.payment_cards
          SET "is_default" = false
              WHERE user_id = (SELECT user_id FROM updated_card)
              AND card_id != $2 `,    
    SQL_DELETE_CARD : `
     UPDATE pa_payment_service.payment_cards
          SET blocked_at = NOW()
          WHERE user_id = $1
          AND card_id = $2 
    `,
  },
  CARDS : {  
    SQL_GET_CARDS : `SELECT card_id as "cardId",  pay_system as "paySystem",  mask_card_number as "maskedCardNumber", is_default  as "isDefault" from pa_payment_service.payment_cards WHERE user_id = $1 and blocked_at is null`,    
  }
};

const MESSAGES = {
   RU : {    
      INPUT_VALIDATION_ERROR: 'Ошибка проверки входных данных',
      PRODUCT_ID_REQUIRED: 'Ошибка проверки productId',
      PRODUCT_NOT_FOUND: 'Продукт не найден',
      ERROR_FETCHING_MEDIA: 'Ошибка получения медиафалов для продукта',
      ERROR_FETCHING_PRODUCT: 'Ошибка получения продукта',
      ERROR_FETCHING_WAREHOUSE: 'Ошибка при получении информации о состоянии склада',
      RESERVE_ITEM_SUCCESS : 'Резервирование товара выполнено',
      RESERVE_ITEM_FAILED : 'Возникла ошибка при резервирование товара',
      RELEASE_ITEM_SUCCESS : 'Отмена резервирования товара выполнена',   
      RELEASE_ITEM_FAILED :  'Возникла ошибка при отмене резервирования товара',     
      ERROR_REMOVING_PRODUCT_FROM_BASKET : 'Ошибка удаления продукта из корзины',
 
   }
}

/* Экспорт */
module.exports = {
  SQL, MESSAGES
};
